Public Class IntegrationMappingConfiguration
#Region "Header"
    Dim mousex As Integer
    Dim mousey As Integer
    Dim drag As Boolean
    Private Sub header_MouseDown(sender As Object, e As MouseEventArgs) Handles header.MouseDown
        drag = True
        mousex = Windows.Forms.Cursor.Position.X - Me.Left
        mousey = Windows.Forms.Cursor.Position.Y - Me.Top
    End Sub

    Private Sub header_MouseMove(sender As Object, e As MouseEventArgs) Handles header.MouseMove
        If drag Then
            Me.Top = Windows.Forms.Cursor.Position.Y - mousey
            Me.Left = Windows.Forms.Cursor.Position.X - mousex
        End If
    End Sub

    Private Sub header_MouseUp(sender As Object, e As MouseEventArgs) Handles header.MouseUp
        drag = False
    End Sub

#End Region

    Private Sub IntegrationMappingConfiguration_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        Call SetFieldMapUI()
        Call LoadMapButton()
    End Sub
    Protected Sub btn_Click(ByVal sender As Object, ByVal e As EventArgs)
        Dim btn As Button = CType(sender, Button)
        MappingFieldModuleForm.Tag = btn.Text
        MappingFieldModuleForm.AccessibleName = btn.Tag
        MappingFieldModuleForm.Show()
    End Sub
    Public Sub LoadMapButton()
        Try
            panelMapInbound.Controls.Clear()
            panelMapOutbound.Controls.Clear()

            If oRegistry.GetKeyValue("ServerType") = 9 Then
                Dim oDotNet As New APP_HANADb(oRegistry.GetKeyValue("ServerName"), oRegistry.GetKeyValue("UserName"), AppTech.Decrypt(oRegistry.GetKeyValue("Password")), oRegistry.GetKeyValue("Database"))
                oDotNet.strCommand = "SELECT Case When (Count(*)>0) THEN 'TRUE' ELSE 'FALSE' END ""IsExist"" FROM SCHEMAS Where ""SCHEMA_NAME""='APP_Integration';"
                If oDotNet.GetField(, "IsExist") = False Then
                    oDotNet.strCommand = "CREATE SCHEMA ""APP_Integration"""
                    oDotNet.strCommand = "SELECT Case When (Count(*)>0) THEN 'TRUE' ELSE 'FALSE' END ""IsExist"" FROM OBJECTS Where ""SCHEMA_NAME""='APP_Integration' and ""OBJECT_TYPE""='TABLE' and ""OBJECT_NAME""='APP_Mapping';"
                    If oDotNet.GetField(, "IsExist") = False Then
                        oDotNet.strCommand = "CREATE TABLE ""APP_Integration"".""APP_Mapping""(""Id"" INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,""Code"" NVARCHAR(50),""Name"" NVARCHAR(200),""SAPTable"" NVARCHAR(50),""DataType"" NVARCHAR(50),""Length"" NVARCHAR(50),""IntegField"" NVARCHAR(50),""IntegValue"" NVARCHAR(500),""Direction"" NVARCHAR(50),""FilterField"" NVARCHAR(100),""Operation"" NVARCHAR(10),""FilterValue"" NVARCHAR(200),""CreatedDate"" LONGDATE CS_LONGDATE,""CreatedBy"" NVARCHAR(30),""UpdatedDate"" LONGDATE CS_LONGDATE,""UpdatedBy"" NVARCHAR(30));"
                    End If
                End If
                oDotNet.strCommand = "SELECT * FROM ""APP_Integration"".""APP_Modules"" Where ""Include""='Y'"
                For Each oDR As DataRowView In oDotNet.Ds.Tables(0).DefaultView
                    Select Case oDR("Type")
                        Case "Inbound"
                            Dim btn As New Button
                            btn.Name = oDR("Name")
                            btn.Text = oDR("Name")
                            btn.Tag = oDR("Type")
                            btn.BackgroundImage = My.Resources.buttonGradient
                            btn.BackgroundImageLayout = ImageLayout.Stretch
                            btn.FlatStyle = FlatStyle.Flat
                            btn.Top = 10
                            btn.Dock = DockStyle.Top
                            AddHandler btn.Click, AddressOf btn_Click
                            panelMapInbound.Controls.Add(btn)
                            panelMapInbound.Controls.SetChildIndex(btn, 0)
                        Case "Outbound"
                            Dim btn As New Button
                            btn.Name = oDR("Name")
                            btn.Text = oDR("Name")
                            btn.Tag = oDR("Type")
                            btn.BackgroundImage = My.Resources.buttonGradient
                            btn.BackgroundImageLayout = ImageLayout.Stretch
                            btn.FlatStyle = FlatStyle.Flat
                            btn.Top = 10
                            btn.Dock = DockStyle.Top
                            AddHandler btn.Click, AddressOf btn_Click
                            panelMapOutbound.Controls.Add(btn)
                            panelMapOutbound.Controls.SetChildIndex(btn, 0)
                    End Select
                Next
            ElseIf oRegistry.GetKeyValue("ServerType") = 6 Or oRegistry.GetKeyValue("ServerType") = 7 Or oRegistry.GetKeyValue("ServerType") = 8 Or oRegistry.GetKeyValue("ServerType") = 10 Then
                Dim oDotNet As New App_SqlDb(oRegistry.GetKeyValue("ServerName"), oRegistry.GetKeyValue("UserName"), AppTech.Decrypt(oRegistry.GetKeyValue("Password")), oRegistry.GetKeyValue("Database"))
                oDotNet = New App_SqlDb(oRegistry.GetKeyValue("ServerName"), oRegistry.GetKeyValue("UserName"), AppTech.Decrypt(oRegistry.GetKeyValue("Password")), oRegistry.GetKeyValue("Database"))
                oDotNet.strCommand = "IF NOT EXISTS(SELECT NAME FROM MASTER..SYSdatabases WHERE DB_name(dbid) = 'APP_Integration') BEGIN CREATE DATABASE [APP_Integration] END SELECT GETDATE()"
                oDotNet.strCommand = "IF NOT EXISTS(SELECT NAME FROM [APP_Integration]..SYSObjects WHERE name = 'APP_Mapping') BEGIN CREATE TABLE [APP_Integration]..[APP_Mapping] (Id int identity(1,1) PRIMARY KEY, Code nvarchar(50), Name nvarchar(200),SAPTable nvarchar(50),DataType nvarchar(50),Length NVARCHAR(50),IntegField nvarchar(50),IntegValue nvarchar(500),Direction nvarchar(50),FilterField nvarchar(100),Operation nvarchar(10),FilterValue nvarchar(200), CreatedDate date, CreatedBy nvarchar(30), UpdateDate date,UpdatedBy nvarchar(30)) END SELECT GETDATE()"

                oDotNet.strCommand = "SELECT * FROM APP_Integration..APP_Modules Where Include='Y'"
                For Each oDR As DataRowView In oDotNet.Ds.Tables(0).DefaultView
                    Select Case oDR("Type")
                        Case "Inbound"
                            Dim btn As New Button
                            btn.Name = oDR("Name")
                            btn.Text = oDR("Name")
                            btn.Tag = oDR("Type")
                            btn.BackgroundImage = My.Resources.buttonGradient
                            btn.BackgroundImageLayout = ImageLayout.Stretch
                            btn.FlatStyle = FlatStyle.Flat
                            btn.Top = 10
                            btn.Dock = DockStyle.Top
                            AddHandler btn.Click, AddressOf btn_Click
                            panelMapInbound.Controls.Add(btn)
                            panelMapInbound.Controls.SetChildIndex(btn, 0)
                        Case "Outbound"
                            Dim btn As New Button
                            btn.Name = oDR("Name")
                            btn.Text = oDR("Name")
                            btn.Tag = oDR("Type")
                            btn.BackgroundImage = My.Resources.buttonGradient
                            btn.BackgroundImageLayout = ImageLayout.Stretch
                            btn.FlatStyle = FlatStyle.Flat
                            btn.Top = 10
                            btn.Dock = DockStyle.Top
                            AddHandler btn.Click, AddressOf btn_Click
                            panelMapOutbound.Controls.Add(btn)
                            panelMapOutbound.Controls.SetChildIndex(btn, 0)
                    End Select
                Next
            End If
        Catch ex As Exception

        End Try
    End Sub

    Private Sub btnclose_Click(sender As Object, e As EventArgs) Handles btnclose.Click
        Me.Close()
    End Sub
End Class